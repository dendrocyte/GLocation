# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

# Trigger Keypoint: 打上tag版本號
# 由於on 只能是一個條件限制，若兩個條件都符合才能觸發，所以另一個條件要寫在jobs
on:
  push:
    tags: 
      - 'v*.*'    # 匹配 v1.0, v1.1 等兩段的標籤
      - 'v*.*.*'  # 匹配 v1.0.0, v2.1.5 等三段的標籤



# 要執行job 需要tag branch 才行
jobs:
  build:
    #if: github.ref == 'refs/tags/v*' #限制在推至tags
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    # 以下的變數值：要和gradle.properties, Github/secrets 一致
    # 以下變數名：要和publish.gradle的env variable 一致
    env:
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GPR_TOKEN }}
      SIGNING_KEY_ID: ${{ secrets.SIGN_KEYID }}
      SIGNING_KEY_PASSWORD: ${{ secrets.SIGN_PWD }}

    steps:
    - name: Checkout codes
      uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'corretto'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

     # By Manual 
     # 1.Check if you have gpg keys
     # 2.Save credential at gradle.properties
     # 3.Set `myLibrary` as new child of publication
      # 4.Check `GitHubPackage` as repo of publication
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    # 需要新增gradle.properties, 才能publish to Github package
    - name: Add Style into Gradle Properties
      run: |
        touch gradle.properties
        echo "android.useAndroidX=true" >> gradle.properties 
        echo "android.nonTransitiveRClass=true" >> gradle.properties

    # 若要開啟簽署功能
    # base64 是為了減少換行符轉貼到Github上有誤，使用base64先換成字串
    # 現在要base64解碼,再新增SecretRingFile in GitHub/Runner
    - name: Access SecretRingFile
      run: |
        printf "%s" "${{ secrets.SIGN_KEYRING }}" | base64 --decode > ${{ runner.temp }}/my_secret.gpg

    # 若要開啟簽署功能
    # 在開始publish前先確定建立的私鑰檔是否能辦GPG辨認
    - name: Verify SecretRingFile
      run: |
        gpg --list-secret-keys --keyring ${{ runner.temp }}/my_secret.gpg

    # 若要開啟簽署功能
    # Sign Plugin 需要這些參數寫在 gradle.properties
    - name: Add Sign credential into Gradle Properties
      run: |
        echo "signing.keyId=${SIGNING_KEY_ID}" >> gradle.properties
        echo "signing.password=${SIGNING_KEY_PASSWORD}" >> gradle.properties
        echo "signing.secretKeyRingFile=${{ runner.temp }}/my_secret.gpg" >> gradle.properties


    # --no-daemon 是確保Gradle 用新的process 且用完就關掉, 每個build 都是最新的, 不使用cache info
    - name: Publish to GitHub Packages
      run: ./gradlew publishMyLibraryPublicationToGitHubPackagesRepository --no-daemon


    # 若要開啟簽署功能
    # 確保私鑰不存在Github/runner裡，避免洩露
    - name: Clean up secret file
      if: always()  # 無論之前的步驟成功與否，這一步都會執行
      run: rm -rf ${{ runner.temp }}/my_secret.gpg